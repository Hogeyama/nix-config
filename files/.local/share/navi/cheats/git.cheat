% git

# interactive rebase
git rebase -i --keep-base <commit>^

# add worktree
git worktree add -B {,,<remote>/}<remote-branch-no-prefix>

# add worktree for PR review
<add_worktree_for_pr>

# remove worktree
git worktree remove <worktree_path>

# squash/fixup automatically
GIT_SEQUENCE_EDITOR=: git rebase --autosquash --autostash -i <commit>

# commit and fixup
git commit --fixup=<commit> && GIT_SEQUENCE_EDITOR=: git rebase --autosquash --autostash -i <commit>^

# commit all and fixup
git commit -a --fixup=<commit> && GIT_SEQUENCE_EDITOR=: git rebase --autosquash --autostash -i <commit>^

# create fixup commit
git commit --fixup=<commit>

# add prefix to selected commits
GIT_SEQUENCE_EDITOR=$EDITOR EDITOR='bash -c "{ echo -n \"<prefix> \"; cat $1; } | tee $1 >>/dev/null"' git rebase -i 

$ commit:                  git log --oneline --color=always --- --map "awk '{print $1}'"
$ remote:                  git remote show
$ remote-branch:           git branch -r | sed -e 's/\(.*->\)//' -e 's/^\s*//'
$ remote-branch-no-prefix: git branch -r | sed -e 's/\(.*->\)//' -e 's/^[^\/]*\///'
$ worktree_path:           git worktree list | tail -n+2 --- --map "awk '{print $1}'"
$ add_worktree_for_pr:     gh pr list --json number,headRefName,title | jq -r '.[]| [.number,.title,.headRefName]|join("\t")' --- --multi --expand --map "read -r line; num=$(awk -F'\t' '{print $1}' <<<\"$line\"); title=$(awk -F'\t' '{print $2}' <<<\"$line\"); branch=$(awk -F'\t' '{print $3}' <<<\"$line\"); echo -n \"git worktree add 'pr/$num-$title' -b {,origin/}$branch\""
